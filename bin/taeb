#!/usr/bin/env perl
use strict;
use warnings;
use lib 'lib';
use Getopt::Long;

sub print_usage {
    my ($exit_val) = shift;

    print STDERR <<"USAGE";
TAEB - the Tactical Amulet Extraction Bot
Options:
    --rc          Print TAEB's required nethackrc to stdout
    --loop        Run TAEB repeatedly
    --config=YAML Use the YAML in the given string to override config.yml
    --quit        Abbreviation for --config='{"ai": "Quit"}'
    --help        Print this message
USAGE
    exit $exit_val;
}

my $loop = 0;
my @config_overrides = ();
my %cmdline_options = ('loop' => \$loop, 'config=s' => \@config_overrides);
my @getopt_specifiers = qw/rc help|h quit/;
my $getopts_parser = Getopt::Long::Parser->new;
$cmdline_options{"$_"} = \(my $temp = 0) for @getopt_specifiers;
$getopts_parser->getoptions(%cmdline_options)
  or print_usage(1);

if (${$cmdline_options{'help|h'}}) {
    print_usage(0);
}

if (${$cmdline_options{rc}}) {
    require TAEB::Config;
    print TAEB::Config->nethackrc_contents;
    exit 0;
}

require TAEB::Container;

my $c = TAEB::Container->new->container;

=for disable

# this should be changed to poke directly into the container

TAEB->config->override_config($_) for @config_overrides;

if (${$cmdline_options{quit}}) {
    TAEB->config->override_config('{"ai": "Quit"}');
}

=cut

# XXX: make this a method on the TAEB class?
sub setup_sighandlers {
    my $taeb = shift;

    my $tstp = $SIG{TSTP} = sub {
        # if we don't invoke TSTP then we won't be suspended
        $SIG{TSTP} = 'DEFAULT';

        $taeb->display->deinitialize;

        kill TSTP => $$;
    };

    $SIG{CONT} = sub {
        $SIG{TSTP} = $tstp;

        $taeb->display->reinitialize;
    };

    $SIG{TERM} = sub {
        $SIG{TERM} = 'DEFAULT';

        $taeb->display->deinitialize;

        kill TERM => $$;
    };

    $SIG{USR1} = sub {
        $taeb->debugger->console->repl(undef);
    };
    $SIG{USR2} = sub {
        die "Dying on user request to give a stack trace";
    };
}

$| = 1;

while (1) {
    my $taeb = $c->fetch('app')->get;
    setup_sighandlers($taeb);
    eval {
        local $SIG{INT} = sub { die "Interrupted.\n"; $loop = 0 };
        my $report = $taeb->play;
        print $report->as_string;
    };

    last unless $loop;
    undef $taeb;

    print ' ';
    for (reverse 1..5) {
        print "\b$_";
        sleep 1;
    }
}

